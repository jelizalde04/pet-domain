name: CI/CD Pet Domain Microservices (split jobs)

on:
  push:
    branches: [test, main]
    paths:
      - 'create-pet/**'
      - 'update-pet/**'
      - 'get-pet-by-id/**'
      - 'get-all-pets/**'
      - 'delete-pet/**'
      - '.github/workflows/**'
  pull_request:
    branches: [main]
    paths:
      - 'create-pet/**'
      - 'update-pet/**'
      - 'get-pet-by-id/**'
      - 'get-all-pets/**'
      - 'delete-pet/**'
      - '.github/workflows/**'

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      create_pet: ${{ steps.filter.outputs.create_pet }}
      update_pet: ${{ steps.filter.outputs.update_pet }}
      get_pet_by_id: ${{ steps.filter.outputs.get_pet_by_id }}
      get_all_pets: ${{ steps.filter.outputs.get_all_pets }}
      delete_pet: ${{ steps.filter.outputs.delete_pet }}
    steps:
      - uses: actions/checkout@v4
      - id: filter
        uses: dorny/paths-filter@v3
        with:
          filters: |
            create_pet:
              - 'create-pet/**'
            update_pet:
              - 'update-pet/**'
            get_pet_by_id:
              - 'get-pet-by-id/**'
            get_all_pets:
              - 'get-all-pets/**'
            delete_pet:
              - 'delete-pet/**'

  # -------------------- CREATE-PET --------------------
  test_create_pet:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_pet == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for create-pet
        working-directory: ./create-pet
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./create-pet
        run: |
          npm install
          npm test

  build_and_push_create_pet:
    needs: test_create_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_pet == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build create-pet image
        working-directory: ./create-pet
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/create-pet:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push create-pet image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/create-pet:latest

  deploy_create_pet_test:
    needs: build_and_push_create_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_pet == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy create-pet to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/create-pet.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/create-pet:latest
            docker stop create-pet || true && docker rm create-pet || true
            docker run -d --name create-pet \
              --env-file /home/ubuntu/create-pet.env \
              -p 3001:3001 \
              ${{ secrets.DOCKERHUB_USERNAME }}/create-pet:latest

  deploy_create_pet_prod:
    needs: build_and_push_create_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.create_pet == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy create-pet to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          script: |
            cat <<EOF > /home/ubuntu/create-pet.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/create-pet:latest
            docker stop create-pet || true && docker rm create-pet || true
            docker run -d --name create-pet \
              --env-file /home/ubuntu/create-pet.env \
              -p 3001:3001 \
              ${{ secrets.DOCKERHUB_USERNAME }}/create-pet:latest

  # -------------------- UPDATE-PET --------------------
  test_update_pet:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_pet == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for update-pet
        working-directory: ./update-pet
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./update-pet
        run: |
          npm install
          npm test

  build_and_push_update_pet:
    needs: test_update_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_pet == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build update-pet image
        working-directory: ./update-pet
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/update-pet:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push update-pet image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/update-pet:latest

  deploy_update_pet_test:
    needs: build_and_push_update_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_pet == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy update-pet to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/update-pet.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/update-pet:latest
            docker stop update-pet || true && docker rm update-pet || true
            docker run -d --name update-pet \
              --env-file /home/ubuntu/update-pet.env \
              -p 3002:3002 \
              ${{ secrets.DOCKERHUB_USERNAME }}/update-pet:latest

  deploy_update_pet_prod:
    needs: build_and_push_update_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.update_pet == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy update-pet to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          script: |
            cat <<EOF > /home/ubuntu/update-pet.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/update-pet:latest
            docker stop update-pet || true && docker rm update-pet || true
            docker run -d --name update-pet \
              --env-file /home/ubuntu/update-pet.env \
              -p 3002:3002 \
              ${{ secrets.DOCKERHUB_USERNAME }}/update-pet:latest

  # -------------------- GET-PET-BY-ID --------------------
  test_get_pet_by_id:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_pet_by_id == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for get-pet-by-id
        working-directory: ./get-pet-by-id
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./get-pet-by-id
        run: |
          npm install
          npm test

  build_and_push_get_pet_by_id:
    needs: test_get_pet_by_id
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_pet_by_id == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build get-pet-by-id image
        working-directory: ./get-pet-by-id
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/get-pet-by-id:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push get-pet-by-id image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/get-pet-by-id:latest

  deploy_get_pet_by_id_test:
    needs: build_and_push_get_pet_by_id
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_pet_by_id == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-pet-by-id to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/get-pet-by-id.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-pet-by-id:latest
            docker stop get-pet-by-id || true && docker rm get-pet-by-id || true
            docker run -d --name get-pet-by-id \
              --env-file /home/ubuntu/get-pet-by-id.env \
              -p 3003:3003 \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-pet-by-id:latest

  deploy_get_pet_by_id_prod:
    needs: build_and_push_get_pet_by_id
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_pet_by_id == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-pet-by-id to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          script: |
            cat <<EOF > /home/ubuntu/get-pet-by-id.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-pet-by-id:latest
            docker stop get-pet-by-id || true && docker rm get-pet-by-id || true
            docker run -d --name get-pet-by-id \
              --env-file /home/ubuntu/get-pet-by-id.env \
              -p 3003:3003 \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-pet-by-id:latest

  # -------------------- GET-ALL-PETS --------------------
  test_get_all_pets:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_pets == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for get-all-pets
        working-directory: ./get-all-pets
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./get-all-pets
        run: |
          npm install
          npm test

  build_and_push_get_all_pets:
    needs: test_get_all_pets
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_pets == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build get-all-pets image
        working-directory: ./get-all-pets
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/get-all-pets:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push get-all-pets image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/get-all-pets:latest

  deploy_get_all_pets_test:
    needs: build_and_push_get_all_pets
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_pets == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-all-pets to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/get-all-pets.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-all-pets:latest
            docker stop get-all-pets || true && docker rm get-all-pets || true
            docker run -d --name get-all-pets \
              --env-file /home/ubuntu/get-all-pets.env \
              -p 3004:3004 \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-all-pets:latest

  deploy_get_all_pets_prod:
    needs: build_and_push_get_all_pets
    runs-on: ubuntu-latest
    if: needs.changes.outputs.get_all_pets == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy get-all-pets to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          script: |
            cat <<EOF > /home/ubuntu/get-all-pets.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/get-all-pets:latest
            docker stop get-all-pets || true && docker rm get-all-pets || true
            docker run -d --name get-all-pets \
              --env-file /home/ubuntu/get-all-pets.env \
              -p 3004:3004 \
              ${{ secrets.DOCKERHUB_USERNAME }}/get-all-pets:latest

  # -------------------- DELETE-PET --------------------
  test_delete_pet:
    needs: changes
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_pet == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Generate .env for delete-pet
        working-directory: ./delete-pet
        run: |
          cat <<EOF > .env
          DB_HOST=${{ secrets.DB_HOST }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_PORT=${{ secrets.DB_PORT }}
          DB_NAME=${{ secrets.DB_NAME }}
          PET_DB_NAME=${{ secrets.PET_DB_NAME }}
          RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
          AWS_REGION=${{ secrets.AWS_REGION }}
          DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
          EOF
      - name: Install dependencies & run tests
        working-directory: ./delete-pet
        run: |
          npm install
          npm test

  build_and_push_delete_pet:
    needs: test_delete_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_pet == 'true'
    steps:
      - uses: actions/checkout@v4
      - name: Build delete-pet image
        working-directory: ./delete-pet
        run: docker build -t ${{ env.DOCKERHUB_USERNAME }}/delete-pet:latest .
      - name: Login to DockerHub
        run: echo "${{ env.DOCKERHUB_TOKEN }}" | docker login -u "${{ env.DOCKERHUB_USERNAME }}" --password-stdin
      - name: Push delete-pet image
        run: docker push ${{ env.DOCKERHUB_USERNAME }}/delete-pet:latest

  deploy_delete_pet_test:
    needs: build_and_push_delete_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_pet == 'true' && github.ref == 'refs/heads/test'
    steps:
      - uses: actions/checkout@v4
      - name: Deploy delete-pet to EC2 TEST
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_TEST }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cat <<EOF > /home/ubuntu/delete-pet.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/delete-pet:latest
            docker stop delete-pet || true && docker rm delete-pet || true
            docker run -d --name delete-pet \
              --env-file /home/ubuntu/delete-pet.env \
              -p 3005:3005 \
              ${{ secrets.DOCKERHUB_USERNAME }}/delete-pet:latest

  deploy_delete_pet_prod:
    needs: build_and_push_delete_pet
    runs-on: ubuntu-latest
    if: needs.changes.outputs.delete_pet == 'true' && (github.ref == 'refs/heads/main' || (github.event_name == 'pull_request' && github.base_ref == 'main'))
    steps:
      - uses: actions/checkout@v4
      - name: Deploy delete-pet to EC2 PROD
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PET_PROD }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY_PROD }}
          script: |
            cat <<EOF > /home/ubuntu/delete-pet.env
            DB_HOST=${{ secrets.DB_HOST }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DB_PORT=${{ secrets.DB_PORT }}
            DB_NAME=${{ secrets.DB_NAME }}
            PET_DB_NAME=${{ secrets.PET_DB_NAME }}
            RESPONSIBLE_DB_NAME=${{ secrets.RESPONSIBLE_DB_NAME }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            S3_BUCKET_NAME=${{ secrets.S3_BUCKET_NAME }}
            AWS_REGION=${{ secrets.AWS_REGION }}
            DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}
            DOCKERHUB_TOKEN=${{ secrets.DOCKERHUB_TOKEN }}
            EOF

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/delete-pet:latest
            docker stop delete-pet || true && docker rm delete-pet || true
            docker run -d --name delete-pet \
              --env-file /home/ubuntu/delete-pet.env \
              -p 3005:3005 \
              ${{ secrets.DOCKERHUB_USERNAME }}/delete-pet:latest
